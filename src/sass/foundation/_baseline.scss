$default-order:
  "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~"
  "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
  "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" !default;

// Compares two string to determine which comes first
//
// @param $a: first string
// @parem $b: second string
// @param $order: order to deal with
//
// @return $boolean
@function _str-compare($a, $b, $order) {
  @if type-of($a) == number and type-of($b) == number {
    @return $a < $b;
  }
  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  @return str-length($a) < str-length($b);
}

// Swaps values at indexes $a and $b from $list
//
// @param $list: list to update
// @param $a: index of first element
// @param $b: index of second element
//
// @return list
@function _swap($list, $a, $b) {
  @if abs($a) > length($list) or abs($b) > length($list) {
    @return $list;
  }
  $tmp: nth($list, $a);
  $list: set-nth($list, $a, nth($list, $b));
  $list: set-nth($list, $b, $tmp);
  @return $list;
}

@function quick-sort($list, $order: $default-order) {
  $less:  ();
  $equal: ();
  $large: ();
  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));
    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, "comma");
      }
      @else if _str-compare($item, $seed, $order) {
        $less: append($less, $item, "comma");
      }
      @else if not _str-compare($item, $seed, $order) {
        $large: append($large, $item, "comma");
      }
    }
    @return join(join(quick-sort($less, $order), $equal), quick-sort($large, $order));
  }
  @return $list;
}

@function scale-range($ideal: 16, $ratio: 1.333, $important: 0, $offset-important: -4, $offset-ideal: -1) {

  $greek: (alpha beta gamma delta epsilon zeta eta theta iota);
  $numbers: ();

  $greekLength: length($greek);

  $idealList: ();
  $importantList: ();
  $tmpList: ();

  $returnList: ();

  @if $important > 0 {
    $ide: $offset-ideal;
    $imp: $offset-important;

    @while $ide < $greekLength {
      $importantList: join($importantList, modular-scale($important, $ide, $ratio));
      $ide: $ide + 1;
    }

    @while $imp < $greekLength {
      $idealList: join($idealList, modular-scale($ideal, $imp, $ratio));
      $imp: $imp + 1;
    }

    $tmpList: map-merge($importantList, $idealList);
    $tmpList: quick-sort($tmpList);

    @for $i from 1 through $greekLength {
      $numbers: append($numbers, nth($tmpList, $i));
      $returnList: map-merge($returnList, nth($greek, -$i) nth($numbers, $i), "comma");
    }
  }

  @return $returnList;
}
